# Given
#
# global.externalDomainName = k8s.example.com
# global.externalIP  = 1.2.3.4
# global.ingressIP1  = 192.168.0.4
# global.ingressIP2  = 192.168.0.5
#
# then there should be DNS records:
#
# k8s.example.com     in  NS   ns.k8s.example.com
# ns.k8s.example.com  in  A    1.2.3.4
#
# Additionally, ingressIP1 != externalIP, then the
# following routing rules (e.g. gateway port-forwards) should be in place:
#
# 1.2.3.4 -> 80/tcp  -> 192.168.0.4 (80/tcp)
# 1.2.3.4 -> 443/tcp -> 192.168.0.4 (443/tcp)
# 1.2.3.4 -> 53/tcp  -> 192.168.0.4 (53/tcp)
# 1.2.3.4 -> 53/udp  -> 192.168.0.4 (53/udp)
#

global:
  domain: ""
  ingressIP1: ""
  ingressIP2: ""
  externalIP: ""
  # acmeEmailAddress: ""

secrets:
  # A valid hmac-sha512 tsig key. To generate, you can run:
  # $ tsig-keygen -a hmac-sha512 | grep "secret" | cut -d'"' -f2
  bind9tsigKey: "yOQnD4gYPs1MJiDpVdRB1Ws54PjHdvJrUVCAtn0UUTaQoRNAGcvgulMX8ZDK6Yo3+SUI0QuUos1f2jDgIyhBrQ=="
  # Admin password for grafana
  grafanaAdminPassword: "changeme"
  
# Destination of all the argocdApplications
argocdProjectName: default
# Dictionary of argocd helm Applications; for each the helm.values dict is passed through tpl
argocdApplications:
  argocd:
    enabled: true
    name: argocd
    namespace: argocd
    helm:
      repoURL: https://argoproj.github.io/argo-helm 
      chart: argo-cd
      targetRevision: v5.41.0 
      # https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/values.yaml
      values:
        redis-ha:
          enabled: true
        controller:
          replicas: 1
        server:
          replicas: 2
        repoServer:
          replicas: 2
        applicationSet:
          replicaCount: 2
        configs:
          params:
            # tls is handled by ingress controller
            server.insecure: true
  certManager:
    enabled: true
    name: cert-manager
    namespace: cert-manager
    helm:
      repoURL: https://charts.jetstack.io 
      chart: cert-manager
      targetRevision: v1.12.2 
      # https://github.com/cert-manager/cert-manager/blob/master/deploy/charts/cert-manager/values.yaml
      values:
        installCRDs: true
  longhorn:
    enabled: true
    name: longhorn
    namespace: longhorn-system
    helm:
      chart: longhorn
      repoURL: https://charts.longhorn.io
      targetRevision: v1.4.3
      # https://github.com/longhorn/charts/blob/master/charts/longhorn/values.yaml
      values: {}
  metallb:
    enabled: true
    name: metallb
    namespace: metallb-system
    helm:
      chart: metallb 
      repoURL: https://metallb.github.io/metallb 
      targetRevision: v0.13.10
      # https://github.com/metallb/metallb/blob/main/charts/metallb/values.yaml
      values: {}
  externalDns:
    enabled: true
    name: external-dns
    namespace: external-dns
    helm:
      chart: external-dns 
      repoURL: https://kubernetes-sigs.github.io/external-dns
      targetRevision: v1.12.2
      # https://github.com/kubernetes-sigs/external-dns/blob/master/charts/external-dns/values.yaml
      values:
        provider: rfc2136
        interval: "3s"
        txtPrefix: "external-dns-"
        txtOwnerId: k8s
        domainFilters: ["{{ .Values.global.domain }}"]
        extraArgs:
          - --rfc2136-min-ttl=900s
          - --rfc2136-host=bind-primary.bind9.svc.cluster.local
          - --rfc2136-port=53
          - --rfc2136-zone={{ .Values.global.domain }}
          - --rfc2136-tsig-secret-alg=hmac-sha512
          - --rfc2136-tsig-keyname=tsigkey
          - --rfc2136-tsig-axfr
        env:
          - name: EXTERNAL_DNS_RFC2136_TSIG_SECRET
            valueFrom:
              secretKeyRef:
                name: tsig-secret
                key: rfc2136_tsig_secret 
  reloader:
    enabled: true
    name: reloader
    namespace: reloader
    helm:
      chart: reloader
      repoURL: https://stakater.github.io/stakater-charts 
      targetRevision: v1.0.31 
      # https://github.com/stakater/Reloader/blob/master/deployments/kubernetes/chart/reloader/values.yaml
      values: {}
  kubePrometheusStack:
    enabled: true
    name: kube-prometheus-stack
    namespace: monitoring
    helm:
      chart: kube-prometheus-stack
      repoURL: https://prometheus-community.github.io/helm-charts 
      targetRevision: v48.1.1
      # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
      values:
        grafana: 
          adminPassword: "{{ .Values.secrets.grafanaAdminPassword }}"
          additionalDataSources: 
            - name: Loki
              type: loki
              url: http://loki-gateway.monitoring.svc.cluster.local
              access: proxy
  loki:
    enabled: true
    name: loki
    namespace: monitoring
    helm:
      chart: loki
      repoURL: https://grafana.github.io/helm-charts 
      targetRevision: v5.8.8
      # https://github.com/grafana/loki/blob/main/production/helm/loki/values.yaml
      values:
        minio:
          enabled: true
        loki:
          auth_enabled: false
        write:
          persistence:
            size: 2Gi
        read:
          persistence:
            size: 2Gi
        backend:
          persistence:
            size: 2Gi
        singlebinary:
          persistence:
            size: 2Gi
    ignoreDifferences:
      - group: apps
        kind: StatefulSet
        jqPathExpressions:
          - .spec.volumeClaimTemplates[].apiVersion
          - .spec.volumeClaimTemplates[].kind
      - group: monitoring.coreos.com
        kind: ServiceMonitor
        jqPathExpressions:
          - .spec.endpoints[]?.relabelings[]?.action
      
  promtail:
    enabled: true
    name: promtail
    namespace: monitoring
    helm:
      chart: promtail
      repoURL: https://grafana.github.io/helm-charts 
      targetRevision: v6.11.6
      # https://github.com/grafana/helm-charts/blob/main/charts/promtail/values.yaml
      values:
        config:
          clients:
            - url: http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push
  ingress1:
    enabled: true
    name: ingress1
    namespace: ingress1
    helm:
      chart: ingress-nginx 
      repoURL: https://kubernetes.github.io/ingress-nginx
      targetRevision: v4.7.0
      # https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
      values:
        controller:
          extraArgs:
            default-ssl-certificate: cert-manager/wildcard-tls
          ingressClassResource:
            name: ingress1
            default: false
          service:
            loadBalancerIP: "{{ .Values.global.ingressIP1 }}"
            annotations:
              metallb.universe.tf/allow-shared-ip: "shared-ip"
          resources:
            requests:
              cpu: 300m
              memory: 300Mi
          replicaCount: 3
  ingress2:
    enabled: true
    name: ingress2
    namespace: ingress2
    helm:
      chart: ingress-nginx 
      repoURL: https://kubernetes.github.io/ingress-nginx
      targetRevision: v4.7.0
      # https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
      values:
        controller:
          extraArgs:
            default-ssl-certificate: cert-manager/wildcard-tls
          ingressClassResource:
            name: ingress2
            default: true
          service:
            loadBalancerIP: "{{ .Values.global.ingressIP2 }}"
          resources:
            requests:
              cpu: 300m
              memory: 300Mi
          replicaCount: 3
  bind9:
    enabled: true
    name: bind9
    namespace: bind9
    helm:
      chart: bind9
      repoURL: https://karlivory.github.io/helm-charts
      targetRevision: v0.1.4
      # https://github.com/karlivory/helm-charts/blob/main/charts/bind9/values.yaml
      values:
        secondary:
          service:
            loadBalancerIP: "{{ .Values.global.ingressIP1 }}"
            annotations:
              metallb.universe.tf/allow-shared-ip: "shared-ip"
        domain: "{{ .Values.global.domain }}"
        # A valid hmac-sha512 tsig key. To generate, you can run:
        # $ tsig-keygen -a hmac-sha512 | grep "secret" | cut -d'"' -f2
        tsigKey: "{{ .Values.secrets.bind9tsigKey }}"
        zone:
          refresh: 10
          retry: 10
          expire: 3600
          negativeCacheTtl: 3600
          # passed through tpl
          dnsRecords:
            - name: ns
              type: A
              value: "{{ .Values.global.externalIP }}"
            - name: ingress1
              type: A
              value: "{{ .Values.global.externalIP }}"
            - name: ingress2
              type: A
              value: "{{ .Values.global.ingressIP2 }}"

extras:
  enabled: true

ingresses:
  - name: argocd-ingress
    namespace: argocd
    host: "argocd.{{ .Values.global.domain }}"
    externalDnsTarget: "ingress2.{{ .Values.global.domain }}"
    service:
      name: argocd-server
      port: 80
  - name: grafana-ingress
    namespace: monitoring
    host: "grafana.{{ .Values.global.domain }}"
    externalDnsTarget: "ingress2.{{ .Values.global.domain }}"
    service:
      name: kube-prometheus-stack-grafana
      port: 80

